#!/usr/bin/env Rscript
# This software was developed at the National Institute of Standards and
# Technology (NIST) by employees of the Federal Government in the course
# of their official duties. Pursuant to title 17 Section 105 of the
# United States Code, this software is not subject to copyright protection
# and is in the public domain. NIST assumes no responsibility whatsoever for
# its use by other parties, and makes no guarantees, expressed or implied,
# about its quality, reliability, or any other characteristic.

################################################################################
# Test for periodic patterns in minutia placement density functions.           #
# http://github.com/usnistgov/minex                                            #
#                                                                              #
# Using PNG input requires 'png,' available from:                              #
# https://cran.r-project.org/web/packages/png/index.html                       #
# Please note that using 8-bit graysalce PNG input is an approximation due to  #
# scaling of values in the range [0, 255].                                     #
################################################################################

# Cut-off for accept/reject decision
MINEXIII.PERIODIC.THRESHOLD <- 0.002

# Load a minutia density file and convert to density matrix.
get.density.matrix <- function(minutia.file, image.size = NULL)
{
	# Read in as data frame.
	minutia.data <- read.table(minutia.file, header = TRUE, sep = ",")

	# Convert to density matrix.
	if (is.null(image.size)) {
		min.X <- min(minutia.data$x) + 1
		min.Y <- min(minutia.data$y) + 1
		max.X <- max(minutia.data$x) + 1
		max.Y <- max(minutia.data$y) + 1

		minutia.density <- matrix(0, nrow = max.X + min.X,
		    ncol = max.Y + min.Y)
	} else {
		minutia.density <- matrix(0, nrow = image.size,
		    ncol = image.size)
	}

	minutia.density[cbind(minutia.data$x + 1, minutia.data$y + 1)] <-
	    minutia.data$count

	minutia.density
}

# Apply windowing to density matrix.
apply.windowing <- function(density.matrix)
{
	w <- ncol(density.matrix)
	h <- nrow(density.matrix)

	wx <- sin(pi * 0:(w-1) / (w-1))
	wy <- sin(pi * 0:(h-1) / (h-1))

	# Outer product to matrix form.
	weights <- wy %o% wx

	density.matrix * weights
}

get.flip.indexes <- function(N)
{
	if (N %% 2 == 0) {
		halfN <- N / 2
		rez <- c(halfN + (1:halfN), 1:(halfN + 1))
	} else {
		floorHalfN <- floor(N / 2)
		ceilingHalfN <- ceiling(N / 2)
		rez <- c(ceilingHalfN + 1:floorHalfN, 1:ceilingHalfN)
	}

	rez
}

# Convert minutia density plot to fourier representation.
load.fft <- function(minutia.density)
{
	image.nrow <- nrow(minutia.density)
	image.ncol <- ncol(minutia.density)

	# Compute Fourier transform.
	f <- fft(minutia.density)

	# Take magnitude of complex number at each point.
	f <- abs(f)
	fDiv <- f[1,1]

	# Flip quadrants I and III, and II and IV.
	idx <- get.flip.indexes(image.ncol)
	f <- f[,idx]
	idx <- get.flip.indexes(image.nrow)
	f <- f[idx,]  # matrix becomes symmetric with respect to center

	f / fDiv
}

# Black out center area of FFT (low-frequency area).
blackout.center <- function(f, radius = 16)
{
	# Get distance of every point from center.
	coords <- expand.grid(x = 1:ncol(f), y = 1:nrow(f))
	midCol <- (1 + ncol(f)) / 2
	midRow <- (1 + nrow(f)) / 2

	distances <- ((coords$x - midCol) /
	    ncol(f)*368)^2 + ((coords$y - midRow) / nrow(f)*368)^2

	# Indices of coordinates within the center radius.
	indices <- distances <= radius^2

	# Set to zero and return.
	f[cbind(coords$y[indices], coords$x[indices])] <- 0
	f
}

# Display FFT and density matrix (primarily for development purposes).
display.fft <- function(density.matrix, f)
{
	# Open new X11 window
	x11()

	# Display both images.
	par(mfrow = c(1, 2))                           # one row, two columns.

	image(density.matrix, col = grey(0:255 / 255)) # display minutia density
	image(f, col = grey(0:255/255))                # display Fourier space

	# Convert to log scale for visualization.
	f <- log(1 + f)

	# Mark locations of the first thr.idx maximums in the image, if they
	# are above threshold.
	thr.idx  <- 8
	f.sorted <- sort(f, decreasing=TRUE)
	f.thr	 <- f.sorted[thr.idx]
	f.thr	 <- max(f.thr, MINEXIII.PERIODIC.THRESHOLD)

	# Mark location of the absolute maximum in the image.
	coords <- which(f >= f.thr, arr.ind = TRUE)
	points(coords[,1] / nrow(f), coords[,2] / nrow(f), col="darkred",
	    cex=2, lwd=3)

	# Wait for mouse click
	locator(1)
	print("Click inside image to close.")
}

perform.grid.test <- function(density.path, image.size = NULL,
                              density.matrix = NULL)
{
	min.count <- NULL

	if (is.null(density.matrix)) {
		extension <- tools::file_ext(density.path)

		# TXT or CSV file.
		if (extension == "txt" || extension == "csv") {
			cat(sprintf("          File: %s\n", density.path))

			density.matrix <- get.density.matrix(density.path,
			    image.size = image.size)
			min.count      <- sum(density.matrix)
		# PNG file.
		} else if (extension == "png") {
			cat(sprintf("           File: %s\n", density.path))

			img <- png::readPNG(image_name)

			# If PNG file is RGB (if all gray, shouldn't matter
			# which channel we pick).
			if (length(dim(img))==3)
				img <- img[,,1]

			density.matrix <- t(img)
		} else {
			stop("Cannot read file format.")
		}
	}

	density.matrix <- apply.windowing(density.matrix)

	# Convert to FFT.
	f <- load.fft(density.matrix)
	f <- blackout.center(f)

	# Find the maximum in the FFT.
	max.modulation <- max(f)
	decision <- (max.modulation >= MINEXIII.PERIODIC.THRESHOLD)

	cat(sprintf("        Pattern: %s\n", decision))
	cat(sprintf("          Score: %.5f\n", round(max.modulation, 5)))

	# Display images.
#	display.fft(density.matrix, f)

	decision
}

# Get command line arguments.
args <- commandArgs(trailingOnly = TRUE)
args.error <- paste("\nUsage: minexiii_grid_detector <x_y_counts.csv>",
    "<width_or_height>\n      ",
    "minexiii_grid_detector <minutia_pdf.png>")

if (length(args) < 1)
	stop(args.error)
if (!file.exists(args[1]))
	stop(sprintf("%s does not exist", args[1]))


image.size <- NULL

if (length(args) >= 2)
	image.size <- as.numeric(args[2])

# Load density matrix and convert to density matrix.
decision <- perform.grid.test(args[1], image.size = image.size)

# Set return status
quit(status = decision)

